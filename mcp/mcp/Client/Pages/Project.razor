@page "/project/{ProjectID:int}"
@using mcp.Shared.ViewModels
@using mcp.Client.Shared
@inject HttpClient Http

<div class="alert alert-primary">
    <h1 class="d-inline">

        <NavLink href="/garage" Match="NavLinkMatch.All">Garage</NavLink>
        <span> > </span>

        <NavLink href="@ProjectViewModel?.VehicleLink" Match="NavLinkMatch.All">@ProjectViewModel?.VehicleName</NavLink>

        @if (IsSubProject)
        {
            <span> > </span>
            <NavLink href="@ProjectViewModel.ParentProjectLink" Match="NavLinkMatch.All">@ProjectViewModel.ParentProjectName</NavLink>
        }

        <span> > </span>
        @if (ProjectViewModel != null)
        {
            <span>@ProjectViewModel.Name</span>


        }


        @if (ProjectViewModel != null && ProjectViewModel.UserCategory != null)
        {
            <span class="badge badge-primary badge-pill ml-4 float-right"><span class="">@ProjectViewModel.UserCategory</span></span>
        }


    </h1>

    <hr>
    <p>
        @if (IsSubProject)
        {
            <span class="badge badge-primary badge-pill mr-2"><span class="">Sub-Project of @ProjectViewModel.ParentProjectName</span></span>
        }

        @if (ProjectViewModel?.Description?.Length > 0)
        {
            <span>@ProjectViewModel?.Description</span>
        }
        else
        {
            <span><em>No description available</em></span>
        }
    </p>

    </div>

<div class="row mb-4">

    <!--dependencies-->
    @if (!IsSubProject)
    {
        <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12 mb-2">
            <div class="card">
                <div class="card-header">
                    <h2>Project Dependencies</h2>
                </div>
                <div class="card-body">
                    @if (ProjectViewModel?.Dependencies != null && ProjectViewModel.Dependencies.Count > 0)
                    {
                    <div>
                        <p>The following projects must be completed before this project can be completed:</p>
                        <div>
                            <ProjectsList Projects="ProjectViewModel.Dependencies"></ProjectsList>
                        </div>
                    </div>
                    }
                    else
                    {
                        <div class="alert alert-success" role="alert">
                            This project can be completed on its own with no dependencies.
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    <!--blocked-->
    @if (!IsSubProject)
    {
        <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12 mb-2">
            <div class="card">
                <div class="card-header">
                    <h2>Blocked Projects</h2>
                </div>
                <div class="card-body">
                    @if (ProjectViewModel?.BlockedProjects != null && ProjectViewModel.BlockedProjects.Count > 0)
                    {
                    <div>
                        <p>The following projects can't be completed until this project is completed:</p>
                        <div>
                            <ProjectsList Projects="ProjectViewModel.BlockedProjects"></ProjectsList>
                        </div>
                    </div>
                    }
                    else
                    {
                        <div class="alert alert-success" role="alert">
                            This project isn't blocking any other projects.
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    <!--budget-->
    <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12 mb-2">
        <div class="card">
            <div class="card-header">
                <h2>Budget</h2>
            </div>
            <div class="card-body">
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: 25%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">25%</div>
                </div>
            </div>
        </div>
    </div>

    <!--progress-->
    <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12 mb-2">
        <div class="card">
            <div class="card-header">
                <h2>Progress</h2>
            </div>
            <div class="card-body">
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: 25%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">25%</div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (!IsSubProject)
{
<div>
    <h2>Sub-Projects</h2>
    @if (ProjectViewModel?.SubProjects != null && ProjectViewModel.SubProjects.Count > 0)
    {
        <div class="mb-2">
            <ProjectsList Projects="ProjectViewModel.SubProjects"></ProjectsList>
        </div>
    }
    else
    {
        <div class="alert alert-info">No sub-projects</div>
    }
    @if (ProjectViewModel != null)
    {
        <button class="btn btn-primary mb-2" data-target="#modalProject" data-toggle="modal">Add Sub-Project</button>
        <AddEditProject ProjectID="null" ParentProjectID="@ProjectID" UserCategoryID="@ProjectViewModel.UserCategoryID" VehicleID="@ProjectViewModel.VehicleID" OnRefreshCallback="@RefreshProject"></AddEditProject>
    }

</div>
}

<h2>Parts</h2>

@if (ProjectViewModel?.Parts != null && ProjectViewModel.Parts.Count > 0)
{
    <div>
        <ProjectPartsTable Parts="@ProjectViewModel.Parts" IsLocked="IsPartsLocked"></ProjectPartsTable>
    </div>
}
else
{
    <div class="alert alert-info" role="alert">
        No parts to your project :(
    </div>
}

@if(IsSubProject)
{
    <button class="btn btn-primary" data-target="#modalImportPart" data-toggle="modal">Move Parts From Main Project</button><span>&nbsp;</span>
}

<button class="btn btn-primary" data-target="#modalPart" data-toggle="modal">Add Part</button>
<AddEditPart Part="null" ProjectID="ProjectID" OnRefreshCallback="@RefreshParts"></AddEditPart>

@if (this.IsPartsLocked)
{
    <button class="btn btn-outline-danger" @onmouseover="() => iconClass = iconUnlockedClass" @onmouseout="() => iconClass = iconLockedClass" @onclick="(() => this.IsPartsLocked = false)">
        <span class="@iconClass" aria-hidden="true"></span>
    </button>
}
else
{
    <button class="btn btn-outline-success" @onclick="(() => this.IsPartsLocked = true)" @onmouseover="() => iconClass = iconLockedClass" @onmouseout="() => iconClass = iconUnlockedClass">
        <span class="@iconClass" aria-hidden="true"></span>
    </button>
}


@code {


    [Parameter]
    public int ProjectID { get; set; }


    private ProjectViewModel ProjectViewModel;
    private bool IsSubProject = false;
    private bool IsPartsLocked = true; //I like using 'Is' for bools, grammar be damned

    private static string iconLockedClass = "oi oi-lock-locked";
    private static string iconUnlockedClass = "oi oi-lock-unlocked";
    private string iconClass = iconLockedClass;

    protected override async Task OnParametersSetAsync()
    {
        await RefreshProject();
    }

    private async Task RefreshProject()
    {
        ProjectViewModel = await Http.GetFromJsonAsync<ProjectViewModel>("api/project/" + ProjectID.ToString());
        if(ProjectViewModel != null && ProjectViewModel.ParentProjectID.HasValue)
        {
            IsSubProject = true;
        }
        else
        {
            IsSubProject = false;
        }
    }

    private async Task RefreshParts()
    {
        await RefreshProject();
    }

}
