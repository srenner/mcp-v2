@page "/project/{ProjectID:int}"
@using mcp.Shared.ViewModels
@inject HttpClient Http

<h3>
    <NavLink href="@ProjectViewModel?.VehicleLink" Match="NavLinkMatch.All">@ProjectViewModel?.VehicleName</NavLink>: @ProjectViewModel?.Name
</h3>

<p>@ProjectViewModel?.Description</p>

<h4>Project Dependencies</h4>

@if (ProjectViewModel?.Dependencies != null)
{
    @if (ProjectViewModel.Dependencies.Count == 0)
    {
        <div class="alert alert-success" role="alert">
            This project can be completed on its own with no dependencies.
        </div>
    }
    else
    {
        <div>
            <ul>
                @foreach (var project in ProjectViewModel.Dependencies)
                {
                    <li><NavLink href="@project.ProjectLink" Match="NavLinkMatch.All">@project.Name</NavLink></li>
                }
            </ul>
        </div>

    }
}
else if (ProjectViewModel != null && ProjectViewModel.Dependencies == null)
{
    <div class="alert alert-success" role="alert">
        This project can be completed on its own with no dependencies.
    </div>
}

<h4>Parts</h4>

@if (ProjectViewModel?.Parts != null)
{
    @if (ProjectViewModel.Parts.Count == 0)
    {
        <div class="alert alert-info" role="alert">
            No parts to your project :(
        </div>
    }
    else
    {
        <div>
            <ProjectPartsTable Parts="@ProjectViewModel.Parts"></ProjectPartsTable>
        </div>

    }
}
else if (ProjectViewModel != null && ProjectViewModel.Parts == null)
{
    <div class="alert alert-info" role="alert">
        No parts to your project :(
    </div>
}

<button class="btn btn-primary" data-target="#modalPart" data-toggle="modal">Add Part</button>
<AddEditPart Part="null" ProjectID="ProjectID" OnRefreshCallback="@RefreshParts"></AddEditPart>

@code {


    [Parameter]
    public int ProjectID { get; set; }


    private ProjectViewModel ProjectViewModel;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ProjectViewModel = await Http.GetFromJsonAsync<ProjectViewModel>("api/project/" + ProjectID.ToString());
        }
        catch
        {
            //todo
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            ProjectViewModel = await Http.GetFromJsonAsync<ProjectViewModel>("api/project/" + ProjectID.ToString());
        }
        catch
        {
            //todo
        }
    }

    private async Task RefreshParts()
    {
        //todo get parts only, not the whole project
        ProjectViewModel = await Http.GetFromJsonAsync<ProjectViewModel>("api/project/" + ProjectID.ToString());
    }

}
