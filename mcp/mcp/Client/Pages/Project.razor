@page "/project/{ProjectID:int}"
@using mcp.Shared.ViewModels
@inject HttpClient Http

<div class="alert alert-primary">
    <h3>
        <NavLink href="@ProjectViewModel?.VehicleLink" Match="NavLinkMatch.All">@ProjectViewModel?.VehicleName</NavLink> @ProjectViewModel?.Name
    </h3>
    <hr>
    @if (ProjectViewModel?.Description?.Length > 0)
    {
        <p>@ProjectViewModel?.Description</p>
    }
    else
            {
                <p><em>No description available</em></p>
            }

</div>



<div class="row mb-4">
    <div class="col-lg-4 col-md-6 mb-2">
        <div class="card">
            <div class="card-header">
                <h4>Project Dependencies</h4>
            </div>
            <div class="card-body">
                @if (ProjectViewModel?.Dependencies != null)
                {
                    @if (ProjectViewModel.Dependencies.Count == 0)
                    {
                        <div class="alert alert-success" role="alert">
                            This project can be completed on its own with no dependencies.
                        </div>
                    }
                    else
                    {
                        <div>
                            <ul>
                                @foreach (var project in ProjectViewModel.Dependencies)
                                {
                                    <li><NavLink href="@project.ProjectLink" Match="NavLinkMatch.All">@project.Name</NavLink></li>
                                }
                            </ul>
                        </div>

                    }
                }
                else if (ProjectViewModel != null && ProjectViewModel.Dependencies == null)
                {
                    <div class="alert alert-success" role="alert">
                        This project can be completed on its own with no dependencies.
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-lg-4 col-md-6 mb-2">
        <div class="card">
            <div class="card-header">
                <h4>Budget</h4>
            </div>
            <div class="card-body">
                oh no
            </div>
        </div>
    </div>
    <div class="col-lg-4 col-md-6 mb-2">
        <div class="card">
            <div class="card-header">
                <h4>Progress</h4>
            </div>
            <div class="card-body">
                
            </div>
        </div>
    </div>
</div>


<h4>Sub-Projects</h4>

@if(ProjectViewModel?.SubProjects != null && ProjectViewModel.SubProjects.Count > 0)
{
    <div>
        <ul>
            @foreach(var project in ProjectViewModel.SubProjects)
            {
                <li><NavLink href="@project.ProjectLink" Match="NavLinkMatch.All">@project.Name</NavLink></li>
            }
        </ul>
    </div>
}


<h4>Parts</h4>

@if (ProjectViewModel?.Parts != null)
{
    @if (ProjectViewModel.Parts.Count == 0)
    {
        <div class="alert alert-info" role="alert">
            No parts to your project :(
        </div>
    }
    else
    {
        <div>
            <ProjectPartsTable Parts="@ProjectViewModel.Parts" IsLocked="IsPartsLocked"></ProjectPartsTable>
        </div>

    }
}
else if (ProjectViewModel != null && ProjectViewModel.Parts == null)
{
    <div class="alert alert-info" role="alert">
        No parts to your project :(
    </div>
}

<button class="btn btn-primary" data-target="#modalPart" data-toggle="modal">Add Part</button>
<AddEditPart Part="null" ProjectID="ProjectID" OnRefreshCallback="@RefreshParts"></AddEditPart>

@if (this.IsPartsLocked)
{
    <button class="btn btn-outline-danger" @onmouseover="() => iconClass = iconUnlockedClass" @onmouseout="() => iconClass = iconLockedClass" @onclick="(() => this.IsPartsLocked = false)">
        <span class="@iconClass" aria-hidden="true"></span>
    </button>
}
else
{
    <button class="btn btn-outline-success" @onclick="(() => this.IsPartsLocked = true)"  @onmouseover="() => iconClass = iconLockedClass" @onmouseout="() => iconClass = iconUnlockedClass">
        <span class="@iconClass" aria-hidden="true"></span>
    </button>
}


@code {


    [Parameter]
    public int ProjectID { get; set; }


    private ProjectViewModel ProjectViewModel;
    private bool IsPartsLocked = true; //I like using 'Is' for bools, grammar be damned

    private static string iconLockedClass = "oi oi-lock-locked";
    private static string iconUnlockedClass = "oi oi-lock-unlocked";
    private string iconClass = iconLockedClass;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            ProjectViewModel = await Http.GetFromJsonAsync<ProjectViewModel>("api/project/" + ProjectID.ToString());
        }
        catch
        {
            //todo
        }
    }

    private async Task RefreshParts()
    {
        ProjectViewModel = await Http.GetFromJsonAsync<ProjectViewModel>("api/project/" + ProjectID.ToString());
    }

}
