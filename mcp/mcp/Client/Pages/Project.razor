@page "/project/{ProjectID:int}"
@using mcp.Shared.ViewModels
@using mcp.Shared.Enum 
@using mcp.Client.Shared
@using System.Text.Json
@using System.Text.Json.Serialization
@using mcp.Shared.WebStorage.SessionStorage
@using Blazored.TextEditor
@using System.Web 
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if (ProjectViewModel == null)
{
    <div class="alert alert-info">Please wait</div>
}
else
{
    <!--modal to edit existing-->
    <AddEditProject ProjectID="ProjectID" ParentProjectID="ProjectViewModel.ParentProjectID" UserCategoryID="ProjectViewModel.UserCategoryID" VehicleID="ProjectViewModel.VehicleID" OnRefreshCallback="RefreshProject"></AddEditProject>

    <header class="alert alert-primary">
        <div>
            <h1 class="d-inline-block">
                <NavLink href="/garage" Match="NavLinkMatch.All">Garage</NavLink>
                <span> > </span>
                <NavLink href="@ProjectViewModel?.VehicleLink" Match="NavLinkMatch.All">@ProjectViewModel?.VehicleName</NavLink>
                @if (IsSubProject)
                {
                    <span> > </span>
                    <NavLink href="@ProjectViewModel.ParentProjectLink" Match="NavLinkMatch.All">@ProjectViewModel.ParentProjectName</NavLink>
                }
                <span> > </span>
                <span>@ProjectViewModel.Name</span>
            </h1>
            <div class="d-inline-block ml-4 float-right">
                <button class="btn btn-sm btn-outline-primary" data-toggle="modal" data-target="#modalProject">
                    <span class="oi oi-cog"></span>
                </button>
            </div>
        </div>
        <div>
            @if (IsSubProject)
            {
                <span class="badge badge-primary badge-pill mr-2"><span class="">Sub-Project of @ProjectViewModel.ParentProjectName</span></span>
            }
            @if (ProjectViewModel.UserCategory != null)
            {
                <span class="badge badge-primary badge-pill mr-2"><span class="">@ProjectViewModel.UserCategory</span></span>
            }
            @switch (ProjectViewModel.ProjectStatusID)
            {
                case (int)ProjectStatusEnum.Backlog:
                    <span class="badge badge-secondary badge-pill mr-2">@ProjectViewModel.ProjectStatusString</span>
                    break;
                case (int)ProjectStatusEnum.Active:
                    <span class="badge badge-primary badge-pill mr-2">@ProjectViewModel.ProjectStatusString</span>
                    break;
                case (int)ProjectStatusEnum.Complete:
                    <span class="badge badge-success badge-pill mr-2">@ProjectViewModel.ProjectStatusString</span>
                    break;
            }
        </div>

        @if (ProjectViewModel.Description?.Length > 0)
        {
            <hr>
            <p>@ProjectViewModel.Description</p>
        }

    </header>

    @if (!IsTipDismissed)
    {
        <div class="alert alert-light shadow-sm">
            <div class="d-inline-block mr-1">
                <span>Tap the</span>
                <button class="btn btn-sm btn-link" type="button"><span class="oi oi-resize-height"></span></button>
                <span>icons to expand the different sections</span>
            </div>
            <button class="btn btn-sm btn-outline-info" @onclick="async () => { await ToggleSectionAsync(); }">Dismiss</button>
        </div>
    }

    <div class="mb-4">
        @if (ProjectViewModel.TargetCost.HasValue)
                {
            <div class="mb-2">
                <h3>
                    <span class="d-inline-block">Budget</span>
                    <span class="d-inline-block float-right small">
                        <span class="@(ProjectViewModel.TotalCostSpent > ProjectViewModel.TargetCost ? "text-danger" : "")">
                            <span>$</span><span>@ProjectViewModel.TotalCostSpent</span>
                        </span>
                        <span>spent of</span>
                        <span>$</span><span>@ProjectViewModel.TargetCost.Value</span>
                    </span>
                </h3>
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: @ProjectViewModel.TotalPercentSpentString" aria-valuenow="25" aria-valuemin="0" aria-valuemax="@ProjectViewModel.TargetCost.Value">
                        <span>@ProjectViewModel.TotalPercentSpentString</span>
                    </div>
                </div>
            </div>
        }
        <div>
            <h3>
                <span class="d-inline-block">Progress</span>
            </h3>
            <div class="progress">
                <div class="progress-bar" role="progressbar" style="width: 25%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">25%</div>
            </div>
        </div>
    </div>

    <!--related-->
    <div class="@(IsSubProject ? "d-none" : "row mb-4")">
        <section class="col-md-12">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h2>
                        <button id="toggleRelated" class="btn btn-sm btn-link" type="button" data-toggle="collapse" data-target="#cardRelated" aria-expanded="false" aria-controls="cardRelated" @onclick='async () => { await ToggleSectionAsync(); }'>
                            <span class="oi oi-resize-height"></span>
                        </button>
                        <span>Related Projects</span>
                        <span class="badge badge-info">@ProjectViewModel.RelatedProjectCount</span>
                    </h2>
                </div>
                <div id="cardRelated" class="card-body collapse hide">
                    <div class="row">
                        <!--sub-projects-->
                        @if (!IsSubProject)
                        {
                            <section class="col-lg-4 col-md-6 col-sm-12">
                                <div class="card mb-2">

                                    <div class="card-body">
                                        <h3 class="card-title">
                                            <span>Sub-Projects</span>
                                            <button class="btn btn-primary btn-sm ml-2" data-target="#modalProject" data-toggle="modal">
                                                <span class="oi oi-plus"></span>
                                                <span>Add</span>
                                            </button>
                                        </h3>
                                        <AddEditProject ProjectID="null" ParentProjectID="@ProjectID" UserCategoryID="@ProjectViewModel.UserCategoryID" VehicleID="@ProjectViewModel.VehicleID" OnRefreshCallback="@RefreshProject"></AddEditProject>
                                        @if (ProjectViewModel.SubProjects != null && ProjectViewModel.SubProjects.Count > 0)
                                        {
                                            <div class="mb-2">
                                                <ProjectsList Projects="ProjectViewModel.SubProjects"></ProjectsList>
                                            </div>
                                        }
                                        else
            {
                                            <div class="alert alert-success">No sub-projects</div>
                                        }
                                    </div>
                                </div>
                            </section>
                        }
                        <!--dependencies-->
                        @if (!IsSubProject)
                        {
                            <section class="col-lg-4 col-md-6 col-sm-12">
                                <div class="card">
                                    <div class="card-body">
                                        <h3 class="card-title">Project Dependencies</h3>
                                        @if (ProjectViewModel.Dependencies != null && ProjectViewModel.Dependencies.Count > 0)
                                        {
                                            <div>
                                                <p>The following projects must be completed before this project can be completed:</p>
                                                <div>
                                                    <ProjectsList Projects="ProjectViewModel.Dependencies"></ProjectsList>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-success" role="alert">
                                                This project can be completed on its own with no dependencies.
                                            </div>
                                        }
                                    </div>
                                </div>
                            </section>
                        }

                        <!--blocked-->
                        @if (!IsSubProject)
                        {
                            <section class="col-lg-4 col-md-6 col-sm-12">
                                <div class="card">
                                    <div class="card-body">
                                        <h3 class="card-title">Blocked Projects</h3>
                                        @if (ProjectViewModel.BlockedProjects != null && ProjectViewModel.BlockedProjects.Count > 0)
                                        {
                                            <div>
                                                <p>The following projects can't be completed until this project is completed:</p>
                                                <div>
                                                    <ProjectsList Projects="ProjectViewModel.BlockedProjects"></ProjectsList>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-success" role="alert">
                                                This project isn't blocking any other projects.
                                            </div>
                                        }
                                    </div>
                                </div>
                            </section>
                        }
                    </div>
                </div>
            </div>
        </section>
    </div>

    <!--notes-->
    <div class="row mb-4">
        <section class="col-md-12">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h2 class="d-inline-block">
                        <button id="toggleNotes" class="btn btn-sm btn-link" type="button" data-toggle="collapse" data-target="#cardNotes" aria-expanded="false" aria-controls="cardNotes" @onclick='async () => { await ToggleSectionAsync(); }'>
                            <span class="oi oi-resize-height"></span>
                        </button>
                        <span>Project Notes</span>
                        <span class="badge badge-info">@(ProjectViewModel.InstallationNotes?.Length > 0 && ProjectViewModel.InstallationNotes != "<p><br></p>" ? "*" : "0")</span>
                    </h2>
                </div>
                <div id="cardNotes" class="card-body collapse hide">
                    <div class="@(ProjectViewModel.IsNotesEditMode ? "d-none" : "d-block")">
                        @if (ProjectViewModel.InstallationNotes?.Length > 0 && ProjectViewModel.InstallationNotes != "<p><br></p>")
                        {
                            @((MarkupString)ProjectViewModel.InstallationNotes)
                        }
                        else
{
                            <em>Nothing to see here</em>
                        }
                    </div>

                    <div class="@(ProjectViewModel.IsNotesEditMode ? "d-inline-block" : "d-none")" style="width: 100%">
                        <BlazoredTextEditor @ref="@QuillInstallationNotes" Placeholder="Project notes, installation details, etc...">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>
                                @ProjectViewModel.InstallationNotes
                            </EditorContent>
                        </BlazoredTextEditor>
                    </div>
                    <div class="mt-3 mb-3">
                        <div class="@(ProjectViewModel.IsNotesEditMode ? "d-none" : "d-inline-block")">
                            <button class="btn btn-sm btn-primary d-inline-block" @onclick="StartNotesEditMode">Edit</button>
                        </div>
                        <div class="@(ProjectViewModel.IsNotesEditMode ? "d-inline-block" : "d-none")">
                            <button class="btn btn-sm btn-secondary mr-2" @onclick="CancelNotesEditMode">Cancel</button>
                            <button class="btn btn-sm btn-success" @onclick="SaveNotes">Save Changes</button>
                        </div>
                    </div>
                    <hr>
                    <h3>Checklist</h3>
                    @if (ProjectViewModel.ChecklistItems == null)
                    {
                        <button class="btn btn-primary" @onclick="StartChecklist">
                            <span class="oi oi-check"></span>
                            <span>Start Checklist</span>
                        </button>
                    }
                </div>
            </div>
        </section>
    </div>

    <!--parts-->
    <div class="row mb-4">
        <section class="col-md-12">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h2 class="d-inline-block">

                        <button id="toggleParts" class="btn btn-sm btn-link" type="button" data-toggle="collapse" data-target="#cardParts" aria-expanded="false" aria-controls="cardParts" @onclick='async () => { await ToggleSectionAsync(); }'>
                            <span class="oi oi-resize-height"></span>
                        </button>

                        <span>Parts</span>
                        <span class="badge badge-info">@ProjectViewModel.ActivePartCount</span>

                    </h2>
                    @if (IsSubProject)
                    {
                        <ImportParts ProjectID="@ProjectViewModel.ProjectID" ParentProjectID="@ProjectViewModel.ParentProjectID.Value" OnRefreshCallback="@RefreshProject"></ImportParts>

                    }
@if (ProjectViewModel.Parts != null && ProjectViewModel.Parts.Count > 0)
                    {
                        @* hiding this badge until we find a better place for it *@
                        @if (false)
                        {
                            <div class="d-inline-block float-right">
                                @if (ProjectViewModel.Parts.Any(a => a.QuantityInstalled < a.Quantity))
                                {
                                    <span class="badge badge-pill badge-primary d-inline-block">In Progress</span>
                                }
                                else
                                {
                                    <span class="badge badge-pill badge-success d-inline-block">Complete</span>
                                }
                            </div>
                        }
                    }
                </div>
                <div id="cardParts" class="card-body collapse hide">
                    <div>
                        <AddEditPart Part="null" ProjectID="ProjectID" OnRefreshCallback="@RefreshParts"></AddEditPart>
                    </div>

                    <button class="btn btn-primary btn-sm mb-2" data-target="#modalPart" data-toggle="modal">
                        <span class="oi oi-plus"></span>
                        <span>Add Part</span>
                    </button>

                    @if (IsSubProject)
                    {
                        <button class="btn btn-primary btn-sm ml-2 mb-2" data-target="#modalImportPart" data-toggle="modal">
                            <span class="oi oi-arrow-right"></span>
                            <span>Import Parts From Main Project</span>
                        </button>
                    }

                    @if (ProjectViewModel.Parts != null && ProjectViewModel.Parts.Count > 0)
                    {
                        <div class="mb-1">
                            <h4>
                                <span class="d-inline-block">Parts Cost</span>
                                <span class="d-inline-block float-right small">
                                    <span>$</span><span>@ProjectViewModel.PartCostSpent</span>
                                    <span> spent of </span>
                                    <span class="@(ProjectViewModel.PartCostAllocated > ProjectViewModel.TargetCost ? "text-danger" : "")">
                                        <span>$</span><span>@ProjectViewModel.PartCostAllocated</span>
                                    </span>
                                </span>
                            </h4>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar" style="width: @ProjectViewModel.PartPercentSpentString" aria-valuenow="@ProjectViewModel.PartCostSpent" aria-valuemin="0" aria-valuemax="@ProjectViewModel.PartCostAllocated">
                                    <span>@ProjectViewModel.PartPercentSpentString</span>
                                </div>
                            </div>
                        </div>

                        <div>
                            <ProjectPartsTable Parts="@ProjectViewModel.Parts" IsLocked="IsPartsLocked" OnRefreshCallback="@RefreshParts"></ProjectPartsTable>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info" role="alert">
                            No parts to your project :(
                        </div>
                    }
                </div>
            </div>
        </section>
    </div>

    <!--decision helper-->
    <div class="row mb-4 d-none">
        <section class="col-md-12">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h2 class="d-inline-block">
                        <button id="togglePartDecider" class="btn btn-sm btn-link" type="button" data-toggle="collapse" data-target="#cardPartDecider" aria-expanded="false" aria-controls="cardPartDecider" @onclick='async () => { await ToggleSectionAsync(); }'>
                            <span class="oi oi-resize-height"></span>
                        </button>
                        <span>Part Decider</span>
                        @*<button class="btn btn-primary btn-sm ml-2 mr-2" data-target="#modalPartDecider" data-toggle="modal">
                                <span class="oi oi-plus"></span>
                                <span>Add</span>
                            </button>*@
                    </h2>
                </div>
                <div id="cardPartDecider" class="card-body collapse hide">
                    <div>
                        <table class="table">
                            <tr>
                                <th colspan="4">
                                    <h3 class="d-inline-block">Water Pump</h3>
                                    <button class="btn btn-sm btn-primary d-inline-block">Edit Choices</button>
                                    <button class="btn btn-sm btn-primary d-inline-block">Decide</button>
                                </th>
                            </tr>
                            <tr>
                                <td>Tuff Stuff 1538N</td>
                                <td>Cast iron, 3/4" snout, not a rebuild, unknown impeller design</td>
                                <td>$62.99</td>
                                <td><a href="https://www.speedwaymotors.com/Tuff-Stuff-1538N-2-3L-Ford-Water-Pump,4283.html">www.speedwaymotors.com</a></td>
                            </tr>
                            <tr>
                                <td>Esslinger</td>
                                <td>Aluminum, 3/4" snout, not a rebuild, curved impeller blades, maybe can be underdriven, no heater hose port</td>
                                <td>$240.90</td>
                                <td><a href="https://esslingeracing.com/waterpumps/billet-aluminum-ford-sohc-water-pump">esslingeracing.com</a></td>
                            </tr>
                            <tr>
                                <td>Racer Walsh</td>
                                <td>Aluminum, unknown pulley bolt pattern, not a rebuild, stamped steel impeller blades</td>
                                <td>$180.00</td>
                                <td><a href="https://racerwalsh.com/product/2-3l-aluminum-water-pump/">racerwalsh.com</a></td>
                            </tr>
                            <tr>
                                <td>FlowKooler</td>
                                <td>Cast iron, cnc aluminum impeller blades, unknown snout size</td>
                                <td>$99.00</td>
                                <td><a href="https://flowkoolerwaterpumps.com/collections/hi-flow-water-pumps/products/1682-1983-1994-ford-140-hi-flow-water-pump">flowkoolerwaterpumps.com</a></td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </section>
    </div>
}

@code {

    [Parameter]
    public int ProjectID { get; set; }

    private ProjectViewModel ProjectViewModel;
    private bool IsSubProject = false;
    private bool IsPartsLocked = true;

    private bool IsTipDismissed = false;

    BlazoredTextEditor QuillInstallationNotes;
    string QuillHTMLContent;

    public async Task StartNotesEditMode()
    {
        await this.QuillInstallationNotes.LoadHTMLContent(ProjectViewModel.InstallationNotes);
        ProjectViewModel.IsNotesEditMode = true;
    }

    public void CancelNotesEditMode()
    {
        ProjectViewModel.IsNotesEditMode = false;
    }

    public async Task SaveNotes()
    {
        var html = await this.QuillInstallationNotes.GetHTML();

        var obj = new { notes = html };
        var notesText = JsonSerializer.Serialize<object>(obj);
        var result = await Http.PutAsJsonAsync<string>("api/project/notes/" + ProjectViewModel.ProjectID.ToString(), html);

        ProjectViewModel.IsNotesEditMode = false;
        await RefreshProject();
    }

    protected override async Task OnInitializedAsync()
    {
        IsTipDismissed = await JSRuntime.InvokeAsync<bool>("tips.isDismissed", "expandProjectSection");
    }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshProject();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await SetExpandibles();
    }

    private async Task SetExpandibles()
    {
        string jsonExpansion = await JSRuntime.InvokeAsync<string>("projectSession.getExpansionStates", this.ProjectID);
        var expansionStates = JsonSerializer.Deserialize<ProjectSectionsExpanded>(jsonExpansion);
        if (expansionStates.ProjectID == this.ProjectID)
        {
            //todo room for improvement
            if (expansionStates.IsPartsExpanded)
            {
                await JSRuntime.InvokeVoidAsync("expandCollapsible", "#cardParts");
            }
            if (expansionStates.IsRelatedExpanded)
            {
                await JSRuntime.InvokeVoidAsync("expandCollapsible", "#cardRelated");
            }
            if (expansionStates.IsNotesExpanded)
            {
                await JSRuntime.InvokeVoidAsync("expandCollapsible", "#cardNotes");
            }
        }
    }

    private async Task RefreshProject()
    {
        ProjectViewModel = await Http.GetFromJsonAsync<ProjectViewModel>("api/project/" + ProjectID.ToString());
        if (ProjectViewModel != null && ProjectViewModel.ParentProjectID.HasValue)
        {
            IsSubProject = true;
        }
        else
        {
            IsSubProject = false;
        }
    }

    private async Task ToggleSectionAsync()
    {
        bool isRelatedExpanded = bool.Parse(await JSRuntime.InvokeAsync<string>("isCollapsibleExpanded", "#toggleRelated"));
        bool isPartsExpanded = bool.Parse(await JSRuntime.InvokeAsync<string>("isCollapsibleExpanded", "#toggleParts"));
        bool isNotesExpanded = bool.Parse(await JSRuntime.InvokeAsync<string>("isCollapsibleExpanded", "#toggleNotes"));

        var obj = new ProjectSectionsExpanded
        {
            ProjectID = this.ProjectID,
            IsRelatedExpanded = isRelatedExpanded,
            IsPartsExpanded = isPartsExpanded,
            IsNotesExpanded = isNotesExpanded
        };

        string jsonString = JsonSerializer.Serialize(obj);
        await JSRuntime.InvokeVoidAsync("projectSession.setExpansionStates", this.ProjectID, jsonString);

        if (!IsTipDismissed)
        {
            IsTipDismissed = true;
            await JSRuntime.InvokeVoidAsync("tips.dismiss", "expandProjectSection");
        }
    }

    private async Task RefreshParts()
    {
        await RefreshProject();
    }

    private void StartChecklist()
    {
        ProjectViewModel.ChecklistItems = new List<ProjectChecklistItemViewModel>();
    }

}
