@page "/vehicle/{VehicleID:int}"
@using mcp.Shared.ViewModels
@inject HttpClient Http

<h3>@VehicleViewModel?.Name</h3>


<h4>Projects</h4>
<button class="btn btn-primary mb-2" data-target="#modalProject" data-toggle="modal">Add Project</button>
<AddEditProject ProjectID="null" VehicleID="@VehicleID" OnRefreshCallback="@RefreshProjects"></AddEditProject>
<div class="row">
    <div class="col-lg-4 col-md-6 col-sm-12 mb-2">
        <div class="card">
            <div class="card-header">Backlog</div>
            <div class="card-body">
                @if (BacklogProjects == null || BacklogProjects.Count == 0)
                {
                    <div class="alert alert-info">No Projects in Backlog</div>

                }
                else
                {
                    <ul>
                        @foreach (var project in BacklogProjects)
                        {
                            <li>
                                <NavLink href="@project.ProjectLink" Match="NavLinkMatch.All">@project.Name</NavLink>

                            </li>
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
    <div class="col-lg-4 col-md-6 col-sm-12 mb-2">
        <div class="card">
            <div class="card-header">Active</div>
            <div class="card-body">
                @if (ActiveProjects == null || ActiveProjects.Count == 0)
                {
                    <div class="alert alert-info">No Active Projects</div>
                }
                else
                {
                    <ul>
                        @foreach (var project in ActiveProjects)
                        {
                            <li>
                                <NavLink href="@project.ProjectLink" Match="NavLinkMatch.All">@project.Name</NavLink>
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
    <div class="col-lg-4 col-md-6 col-sm-12 mb-2">
        <div class="card">
            <div class="card-header">Complete</div>
            <div class="card-body">
                @if (CompleteProjects == null || CompleteProjects.Count == 0)
                {
                    <div class="alert alert-info">No Completed Projects</div>

                }
                else
                {
                    <ul>
                        @foreach (var project in CompleteProjects)
                        {
                            <li>
                                <NavLink href="@project.ProjectLink" Match="NavLinkMatch.All">@project.Name</NavLink>

                            </li>
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
</div>



@code {


    [Parameter]
    public int VehicleID { get; set; }


    private VehicleViewModel VehicleViewModel;

    private List<ProjectViewModel> ActiveProjects;
    private List<ProjectViewModel> BacklogProjects;
    private List<ProjectViewModel> CompleteProjects;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await RefreshProjects();
        }
        catch
        {
            //todo
        }
        //catch (AccessTokenNotAvailableException exception)
        //{
        //    exception.Redirect();
        //}
    }

    private async Task RefreshProjects()
    {
        VehicleViewModel = await Http.GetFromJsonAsync<VehicleViewModel>("api/vehicle/" + VehicleID.ToString());
        ActiveProjects = await Http.GetFromJsonAsync<List<ProjectViewModel>>("api/project/active/" + VehicleID.ToString());
        BacklogProjects = await Http.GetFromJsonAsync<List<ProjectViewModel>>("api/project/backlog/" + VehicleID.ToString());
        CompleteProjects = await Http.GetFromJsonAsync<List<ProjectViewModel>>("api/project/complete/" + VehicleID.ToString());
    }

}
