@page "/vehicle/{VehicleID:int}"
@using mcp.Shared.ViewModels
@using mcp.Shared.Enum
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<div class="alert alert-primary">
    <h1>
        <NavLink href="/garage" Match="NavLinkMatch.All" class="text-decoration-none">Garage</NavLink>
        <span> > </span>
        <span>@VehicleViewModel?.Name</span>
    </h1>
</div>

<!--notes-->
<section>
    <h2>Vehicle Notes</h2>
    @if (VehicleViewModel != null)
    {
        @if (!String.IsNullOrEmpty(VehicleViewModel.Notes))
        {
            <div>@VehicleViewModel.Notes</div>
        }
        else
        {
            <em>Nothing to see here</em>
        }
     }
</section>

<!--shopping list-->
<section>
    <h2>Shopping List</h2>
    @if (ShoppingList?.Count > 0)
    {
        <VehicleShoppingList Parts="ShoppingList"></VehicleShoppingList>
    }
</section>

<!--projects-->
<section>
    <h2>Projects</h2>
    <button class="btn btn-primary mb-2" @onclick="OpenProjectModal">
        <span class="oi oi-wrench"></span>
        <span>Add Project</span>
    </button>
    <AddEditProject ProjectID="null" ParentProjectID="null" UserCategoryID="null" VehicleID="@VehicleID" OnRefreshCallback="@RefreshProjects"></AddEditProject>
    <div class="row">
        <div class="col-xl-4 col-lg-6 col-md-12 mb-2">
            <div class="card">
                <div class="card-header"><h3>Backlog</h3></div>
                <div class="card-body">
                    @if (BacklogProjects == null || BacklogProjects.Count == 0)
                    {
                        <div class="alert alert-info">No Projects in Backlog</div>

                    }
                    else
                    {
                        <div>
                            <ProjectsList Projects="BacklogProjects" ProjectStatusID="(int)ProjectStatusEnum.Backlog" OnRefreshCallback="@RefreshProjects"></ProjectsList>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-xl-4 col-lg-6 col-md-12 mb-2">
            <div class="card">
                <div class="card-header"><h3>Active</h3></div>
                <div class="card-body">
                    @if (ActiveProjects == null || ActiveProjects.Count == 0)
                    {
                        <div class="alert alert-info">No Active Projects</div>
                    }
                    else
                    {
                        <div>
                            <ProjectsList Projects="ActiveProjects" ProjectStatusID="(int)ProjectStatusEnum.Active" OnRefreshCallback="@RefreshProjects"></ProjectsList>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-xl-4 col-lg-6 col-md-12 mb-2">
            <div class="card">
                <div class="card-header"><h3>Complete</h3></div>
                <div class="card-body">
                    @if (CompleteProjects == null || CompleteProjects.Count == 0)
                    {
                        <div class="alert alert-info">No Completed Projects</div>

                    }
                    else
                    {
                        <div>
                            <ProjectsList Projects="CompleteProjects"></ProjectsList>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>




@code {


    [Parameter]
    public int VehicleID { get; set; }


    private VehicleViewModel VehicleViewModel;

    private List<ProjectListItemViewModel> ActiveProjects;
    private List<ProjectListItemViewModel> BacklogProjects;
    private List<ProjectListItemViewModel> CompleteProjects;
    private List<ProjectPartViewModel> ShoppingList;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await RefreshProjects();
            await GetShoppingList();
        }
        catch
        {
            //todo
        }
        //catch (AccessTokenNotAvailableException exception)
        //{
        //    exception.Redirect();
        //}
    }

    private async Task RefreshProjects()
    {
        VehicleViewModel = await Http.GetFromJsonAsync<VehicleViewModel>("api/vehicle/" + VehicleID.ToString());
        ActiveProjects = await Http.GetFromJsonAsync<List<ProjectListItemViewModel>>("api/project/active/" + VehicleID.ToString());
        BacklogProjects = await Http.GetFromJsonAsync<List<ProjectListItemViewModel>>("api/project/backlog/" + VehicleID.ToString());
        CompleteProjects = await Http.GetFromJsonAsync<List<ProjectListItemViewModel>>("api/project/complete/" + VehicleID.ToString());
    }

    private async Task OpenProjectModal()
    {
        await JSRuntime.InvokeVoidAsync("showModal", "modalProject");
    }

    private async Task GetShoppingList()
    {
        ShoppingList = await Http.GetFromJsonAsync<List<ProjectPartViewModel>>("api/projectpart/shop/" + VehicleID.ToString());

    }

}
