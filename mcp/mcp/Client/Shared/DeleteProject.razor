@using mcp.Shared.ViewModels
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="modal fade" id="@ModalID" tabindex="-1" role="dialog" aria-labelledby="infoDialogTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="infoDialogTitle"><span>Deleting </span><span>@ProjectName</span></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <EditForm Model="@ProjectNameConfirm" OnSubmit="ConfirmDelete">
                <div class="modal-body">
                    <p>Are you sure you want to delete this project? This cannot be undone. Type the name of the project <em>exactly</em> as written to confirm you know what you're doing.</p>
                    <p>
                        <strong>@ProjectName</strong>
                    </p>
                    <InputText @bind-Value="ProjectNameConfirm" class="form-control" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-danger" disabled="@(ProjectNameConfirm == ProjectName ? false : true)">Confirm Delete</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>



@code {

    [Parameter]
    public string ID { get; set; }

    [Parameter]
    public int ProjectID { get; set; }

    public ProjectViewModel Project { get; set; }
    public string ModalID { get; set; }
    public string ProjectName { get; set; }
    public string ProjectNameConfirm = "";


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (string.IsNullOrEmpty(ID))
        {
            ModalID = "modalDeleteProject";
        }
        else
        {
            ModalID = ID;
        }

        Project = await Http.GetFromJsonAsync<ProjectViewModel>("api/project/basic/" + ProjectID.ToString());
        ProjectName = Project.Name;
    }

    protected async Task ConfirmDelete()
    {
        var response = await Http.DeleteAsync("api/project/" + ProjectID.ToString());

        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("hideModal", "#" + ID);
            NavigationManager.NavigateTo("/vehicle/" + Project.VehicleID.ToString());
        }
    }
}
