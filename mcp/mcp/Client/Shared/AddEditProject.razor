@using mcp.Shared.ViewModels
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<div class="modal fade" id="modalProject" tabindex="-1" role="dialog" aria-labelledby="modalProjectLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalProjectLabel">Project @EditProject?.Name</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <EditForm Model="@EditProject" OnSubmit="SubmitProject">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12">
                            <label for="projectName">Name</label>
                            <InputText id="projectName" @bind-Value="EditProject.Name" class="form-control" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <label for="projectDescription">Description</label>
                            <InputTextArea id="projectDescription" class="form-control" rows="3" @bind-Value="EditProject.Description"></InputTextArea>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <label for="projectCategory">Category</label>
                            <InputSelect id="projectCategory" class="form-control" @bind-Value="EditProject.UserCategoryID">
                                @if (UserCategories != null)
                                {
                                    @foreach (var uc in UserCategories)
                                    {
                                        <option>@uc.Name</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? ProjectID { get; set; }

    [Parameter]
    public int VehicleID { get; set; }

    [Parameter]
    public EventCallback OnRefreshCallback { get; set; }

    private ProjectViewModel EditProject { get; set; } = new ProjectViewModel();
    private List<UserCategoryViewModel> UserCategories { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (ProjectID.HasValue && ProjectID.Value > 0)
        {
            //fetch for edit
        }
        else
        {
            EditProject = new ProjectViewModel { };
        }

    }

    protected override async Task OnInitializedAsync()
    {
        UserCategories = await Http.GetFromJsonAsync<List<UserCategoryViewModel>>("api/usercategory");
    }

    private async Task SubmitProject()
    {
        EditProject.VehicleID = this.VehicleID;
        var result = await Http.PostAsJsonAsync<ProjectViewModel>("api/project", EditProject);

        if (result.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("hideModal", "#modalProject");
            await OnRefreshCallback.InvokeAsync();

        }
    }
}
