@using mcp.Shared.ViewModels
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if (ProjectID != null)
{
    <DeleteProject ID="modalDeleteProject" ProjectID="ProjectID.Value"></DeleteProject>
}

<div class="modal fade" id="modalProject" tabindex="-1" role="dialog" aria-labelledby="modalProjectLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalProjectLabel">Project @CurrentProject?.Name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm Model="@CurrentProject" OnSubmit="SubmitProject">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12 form-group">
                            <label for="projectName">Name</label>
                            <InputText id="projectName" @bind-Value="CurrentProject.Name" class="form-control" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 form-group">
                            <label for="projectDescription">Description</label>
                            <InputTextArea id="projectDescription" class="form-control" rows="3" @bind-Value="CurrentProject.Description"></InputTextArea>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 form-group">
                            <label for="projectCategory">Category</label>
                            <InputSelect id="projectCategory" class="form-control" @bind-Value="CurrentProject.UserCategoryID">
                                @if (UserCategories != null)
                                {
                                    <option value="">Select...</option>
                                    @foreach (var uc in UserCategories)
                                    {
                                        <option value="@uc.UserCategoryID">@uc.Name</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xl-4 col-lg-6 col-md-12 form-group">
                            <label for="projectTargetCost">Target Cost</label>

                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">$</span>
                                </div>
                                <InputNumber id="projectTargetCost" class="form-control" @bind-Value="CurrentProject.TargetCost" />
                            </div>

                        </div>
                        <div class="col-xl-4 col-lg-6 col-md-12 form-group">
                            <label for="projectStartDate">Start Date</label>
                            <InputDate id="projectStartDate" class="form-control" @bind-Value="CurrentProject.StartDate" />
                        </div>
                        <div class="col-xl-4 col-lg-6 col-md-12 form-group">
                            <label for="projectTargetEndDate">Target End Date</label>
                            <InputDate id="projectTargetEndDate" class="form-control" @bind-Value="CurrentProject.TargetEndDate" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    @if (ProjectID.HasValue)
                    {
                        <button type="button" class="btn btn-outline-danger" @onclick="BeginDelete">Delete Project</button>
                    }
                    <button type="submit" class="btn btn-success">Save Project</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? ProjectID { get; set; }

    [Parameter]
    public int? ParentProjectID { get; set; }

    [Parameter]
    public int? UserCategoryID { get; set; }

    [Parameter]
    public int VehicleID { get; set; }

    [Parameter]
    public EventCallback OnRefreshCallback { get; set; }

    private ProjectViewModel CurrentProject { get; set; } = new ProjectViewModel();
    private List<UserCategoryViewModel> UserCategories { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (ProjectID.HasValue && ProjectID.Value > 0)
        {
            CurrentProject = await Http.GetFromJsonAsync<ProjectViewModel>("api/project/basic/" + ProjectID.ToString());
        }
        else
        {
            CurrentProject = new ProjectViewModel { StartDate = DateTime.Today, ParentProjectID = ParentProjectID, UserCategoryID = UserCategoryID };
        }

    }

    protected override async Task OnInitializedAsync()
    {
        UserCategories = await Http.GetFromJsonAsync<List<UserCategoryViewModel>>("api/usercategory");
    }

    private async Task SubmitProject()
    {
        CurrentProject.VehicleID = this.VehicleID;
        if (this.UserCategoryID.HasValue)
        {
            CurrentProject.UserCategoryID = this.UserCategoryID;
        }
        var result = new HttpResponseMessage();
        if (CurrentProject.ProjectID == 0)
        {
            result = await Http.PostAsJsonAsync<ProjectViewModel>("api/project", CurrentProject);
        }
        else
        {
            result = await Http.PutAsJsonAsync<ProjectViewModel>("api/project/" + CurrentProject.ProjectID.ToString(), CurrentProject);
        }
        if (result.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("hideModal", "#modalProject");
            await OnRefreshCallback.InvokeAsync();
        }
    }

    private async Task BeginDelete()
    {
        await JSRuntime.InvokeVoidAsync("hideModal", "#modalProject");
        await JSRuntime.InvokeVoidAsync("showModal", "#modalDeleteProject");

    }
}
