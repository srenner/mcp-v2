@using mcp.Shared.ViewModels
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<AddEditPart ID="modalEditPart" Part="ActivePart" ProjectID="ProjectID" OnRefreshCallback="Refresh"></AddEditPart>

<table class="table">
    <thead>
        <tr>
            <th></th>
            <th>Part</th>
            <th>Link</th>
            <th>Price</th>
            <th>Purchased</th>
            <th>Installed</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var part in Parts)
        {
            <tr class="@(part.QuantityInstalled == part.Quantity ? "alert-success" : 
                         part.ExcludeFromTotal ? "alert-dark" : "")">
                <td>
                    <button class="btn btn-sm btn-outline-info mr-1" data-toggle="modal" data-target="#modalEditPart" @onclick="() => BeginEditPart(part)">
                        <span class="oi oi-pencil"></span>
                    </button>

                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeletePart(part.ProjectPartID)">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
                <td>
                    <span class="font-weight-bold">@part.Name</span>
                    @if (part.Description?.Length > 0)
                    {
                        <InfoDialog ID="@("moreInfo_" + part.ProjectPartID.ToString())" TitleText="@part.Name" BodyText="@part.Description"></InfoDialog>

                        <button class="btn btn-link" data-toggle="modal" data-target="@("#moreInfo_" + part.ProjectPartID.ToString())">
                            <span class="oi oi-magnifying-glass"></span>
                        </button>
                    }

                    @if (part.Manufacturer?.Length > 0 || part.PartNumber?.Length > 0)
                    {
                        <div class="d-inline-block ml-1">
                            <span>(</span><span>@part.Manufacturer</span>
                            @if (part.Manufacturer?.Length > 0 && part.PartNumber?.Length > 0)
                            {
                                <span>&nbsp;</span>
                            }

                            <span>@part.PartNumber</span><span>)</span>
                        </div>
                    }

                </td>
                <td><a href="@part.Link" target="_blank">@part.LinkText</a></td>
                <td>
                    @if (part.MoneyAllocated > 0.00M)
                    {
                        <span>$</span>
                        @part.MoneyAllocated
                    }
                    else
                    {
                        <span>--</span>
                    }
                </td>
                <td>
                    <span class="mr-1">@part.QuantityPurchased/@part.Quantity</span>
                    @if (part.QuantityPurchased < part.Quantity)
                    {
                        <button class="btn btn-sm btn-outline-success" @onclick="() => PurchasePart(part)">
                            <span class="oi oi-plus"></span>
                            <span>Purchase</span>
                        </button>
                    }
                    else
                    {
                        <span class="oi oi-check"></span>
                    }
                </td>
                <td>
                    <span class="mr-1">@part.QuantityInstalled/@part.Quantity</span>
                    @if (part.QuantityInstalled < part.QuantityPurchased)
                    {
                        <button class="btn btn-sm btn-outline-success" @onclick="() => InstallPart(part)">
                            <span class="oi oi-wrench"></span>
                            <span>Install</span>
                        </button>
                    }
                    else if (part.QuantityInstalled == part.Quantity)
                    {
                        <span class="oi oi-check"></span>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public List<ProjectPartViewModel> Parts { get; set; }

    [Parameter]
    public bool IsLocked { get; set; }


    [Parameter]
    public EventCallback OnRefreshCallback { get; set; }

    private ProjectPartViewModel ActivePart { get; set; }
    private int ProjectID { get; set; }

    private async void DeletePart(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Really delete part?");

        if (confirmed)
        {
            var result = await Http.DeleteAsync("api/projectpart/" + id);

            if (result.IsSuccessStatusCode)
            {
                int partsRemovedCount = Parts.RemoveAll(r => r.ProjectPartID == id);
                if (partsRemovedCount == 1)
                {
                    StateHasChanged();
                }
            }
        }
    }

    private async Task BeginEditPart(ProjectPartViewModel part)
    {
        ActivePart = part;
        ProjectID = part.ProjectID;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("showModal", "#modalEditPart");
        await OnRefreshCallback.InvokeAsync();
    }

    private async Task PurchasePart(ProjectPartViewModel part)
    {
        part.QuantityPurchased++;
        var result = await Http.PutAsJsonAsync<ProjectPartViewModel>("api/projectpart/" + part.ProjectPartID, part);
        if (result.IsSuccessStatusCode)
        {
            StateHasChanged();
        }
    }

    private async void InstallPart(ProjectPartViewModel part)
    {
        part.QuantityInstalled++;
        var result = await Http.PutAsJsonAsync<ProjectPartViewModel>("api/projectpart/" + part.ProjectPartID, part);
        if (result.IsSuccessStatusCode)
        {
            StateHasChanged();

        }
    }

    private async Task Refresh()
    {
        await OnRefreshCallback.InvokeAsync();
    }


}
